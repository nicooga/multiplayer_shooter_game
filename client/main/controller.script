local Rx = require 'vendor.rx'
local ColyseusClient = require 'colyseus.client'

local Players = require 'lib.players'

local CLIENT_URL = "ws://localhost:2567"
local ROOM_NAME = "match_room"

local client
local room
local players = {}

local function on_player_connected(session_id)
  local player = Players:get_player_by_session_id(session_id)

  if player.id == 1 then return end -- We don't capture input for player 1, no no.

  room:listen('players/' .. session_id .. '/input/:input_id', function(change)
    if change.operation ~= 'add' then return end

    local input = change.value

    player.input:onNext({
      action_name = change.value.actionName,
      pressed     = change.value.pressed,
      released    = change.value.released,
      x           = change.value.x,
      y           = change.value.y
    })
  end)

  local x = Rx.Subject.create()
  local y = Rx.Subject.create()

  room:listen('players/' .. session_id .. '/position/x', function(change)
    if change.operation == 'add' or change.operation == 'replace' then
      x:onNext(change.value)
    end
  end)

  room:listen('players/' .. session_id .. '/position/y', function(change)
    if change.operation == 'add' or change.operation == 'replace' then
      y:onNext(change.value)
    end
  end)

  Rx.Observable
    .combineLatest(x, y, function(x, y) return { x = x, y = y } end)
    :subscribe(function(pos) player.position:onNext(pos) end)

  room:listen('players/' .. session_id .. '/projectiles/:id', function(change)
    pprint('PROYECTILE ARRIVED')

    if change.operation == 'add' then
      local p = change.value

      player.projectiles:onNext({
        position = vmath.vector3(p.position.x, p.position.y, p.position.z),
        direction = vmath.vector3(p.direction.x, p.direction.y, p.direction.z),
        rotation = vmath.quat(p.rotation.x, p.rotation.y, p.rotation.z, p.rotation.w)
      })
    end
  end)
end

local function on_room_joined(self)
  local current_player = Players:create_player({
    id = 1,
    session_id = room.sessionId
  })

  current_player.position:subscribe(function(pos)
    room:send({
      type = 'updatePlayerPosition',
      position = { x = pos.x, y = pos.y }
    })
  end)

  current_player.projectiles:subscribe(function(p)
    room:send({
      type = 'persistPlayerProjectile',
      projectile = {
        position = { x = p.position.x, y = p.position.y },
        direction = { x = p.direction.x, y = p.direction.y },
        rotation = { x = p.rotation.x, y = p.rotation.y, z = p.rotation.z, w = p.rotation.w }
      }
    })
  end)

  room:listen('players/:session_id', function(change)
    on_player_connected(change.path.session_id)
  end)
end

local function on_client_connected(self)
  room = client:join(ROOM_NAME)
  room:on("join", function() on_room_joined(self) end)
end

local function init_multiplayer_client(self)
  client = ColyseusClient.new(CLIENT_URL, false) -- false to avoid connecting inmediatly
  client:on("open", function() on_client_connected(self) end)
  client:connect() -- connect after registering listeners
end

function init(self)
  msg.post(".", "acquire_input_focus")
  msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
  init_multiplayer_client(self)
end

function update(self, dt)
  client:loop()
end
